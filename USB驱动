#include <linux/config.h>
#include <linux/kernel.h>
#include <linux/errno.h>
#include <linux/init.h>
#include <linux/slab.h>
#include <linux/module.h>
#include <linux/kref.h>
#include <linux/smp_lock.h>
#include <linux/usb.h>
#include <asm/uaccess.h>
#define USB_SKEL_VENDOR_ID	0xfff0
#define USB_SKEL_PRODUCT_ID	0xfff0

static struct usb_device_id skel_table [] = 
{
	{USB_DEVICE(USB_SKEL_VENDOR_ID, USB_SKEL_PRODUCT_ID) },{ }					
};
MODULE_DEVICE_TABLE (usb, skel_table);
#define USB_SKEL_MINOR_BASE	192
struct usb_skel 
{
	struct usb_device *	udev;			
	struct usb_interface *	interface;		
	unsigned char *		bulk_in_buffer;		
	size_t			bulk_in_size;	
	__u8			bulk_in_endpointAddr;	
	__u8			bulk_out_endpointAddr;	
	struct kref		kref;
};
#define to_skel_dev(d) container_of(d, struct usb_skel, kref)

static struct usb_driver skel_driver;

static void skel_delete(struct kref *kref)
{	
	struct usb_skel *dev = to_skel_dev(kref);
	usb_put_dev(dev->udev);
	kfree (dev->bulk_in_buffer);
	kfree (dev);
}

static int skel_open(struct inode *inode, struct file *file)
{
	struct usb_skel *dev;
	struct usb_interface *interface;
	int subminor;
	int retval = 0;
	subminor = iminor(inode);
	interface = usb_find_interface(&skel_driver, subminor);
	if (!interface)
	{
		err ("%s - error, can't find device for minor %d",__FUNCTION__, subminor);
		retval = -ENODEV;
		goto exit;
	}
	dev = usb_get_intfdata(interface);
	if (!dev) 
	{
		retval = -ENODEV;
		goto exit;
	}
	kref_get(&dev->kref);
	file->private_data = dev;
	exit:
	return retval;
}

static int skel_release(struct inode *inode, struct file *file)
{
	struct usb_skel *dev;
	dev = (struct usb_skel *)file->private_data;
	if (dev == NULL)
		return -ENODEV;
	kref_put(&dev->kref, skel_delete);
	return 0;
}

static ssize_t skel_read(struct file *file, char __user *buffer, size_t count, loff_t *ppos)
{
	struct usb_skel *dev;
	int retval = 0;
	dev = (struct usb_skel *)file->private_data;
	retval = usb_bulk_msg(dev->udev,usb_rcvbulkpipe(dev->udev, dev->bulk_in_endpointAddr),
			      dev->bulk_in_buffer, min(dev->bulk_in_size, count),&count, HZ*10);
	if (!retval) 
	{
		if (copy_to_user(buffer, dev->bulk_in_buffer, count))
			retval = -EFAULT;
		else
			retval = count;
	}

	return retval;
}

static void skel_write_bulk_callback(struct urb *urb, struct pt_regs *regs)
{
	if (urb->status && !(urb->status == -ENOENT || urb->status == -ECONNRESET ||urb->status == -ESHUTDOWN)) 
	{
		dbg("%s - nonzero write bulk status received: %d",__FUNCTION__, urb->status);
	}
	usb_buffer_free(urb->dev, urb->transfer_buffer_length, urb->transfer_buffer, urb->transfer_dma);
}

static ssize_t skel_write(struct file *file, const char __user *user_buffer, size_t count, loff_t *ppos)
{
	struct usb_skel *dev;
	int retval = 0;
	struct urb *urb = NULL;
	char *buf = NULL;
	dev = (struct usb_skel *)file->private_data;
	if (count == 0)
		goto exit;
	urb = usb_alloc_urb(0, GFP_KERNEL);
	if (!urb)
	{
		retval = -ENOMEM;
		goto error;
	}
	buf = usb_buffer_alloc(dev->udev, count, GFP_KERNEL, &urb->transfer_dma);
	if (!buf)
	{
		retval = -ENOMEM;
		goto error;
	}
	if (copy_from_user(buf, user_buffer, count)) 
	{
		retval = -EFAULT;
		goto error;
	}
	usb_fill_bulk_urb(urb, dev->udev,usb_sndbulkpipe(dev->udev, dev->bulk_out_endpointAddr)
			  ,buf, count, skel_write_bulk_callback, dev);
	urb->transfer_flags |= URB_NO_TRANSFER_DMA_MAP;
	retval = usb_submit_urb(urb, GFP_KERNEL);
	if (retval) 
	{
		err("%s - failed submitting write urb, error %d", __FUNCTION__, retval);
		goto error;
	}
	usb_free_urb(urb);
exit:
	return count;
error:
	usb_buffer_free(dev->udev, count, buf, urb->transfer_dma);
	usb_free_urb(urb);
	kfree(buf);
	return retval;
}

static struct file_operations skel_fops =
{
	.owner=THIS_MODULE,
	.read=skel_read,
	.write=skel_write,
	.open=skel_open,
	.release=skel_release,
};

static struct usb_class_driver skel_class =
{
	.name="usb/skel%d",
	.fops=&skel_fops,
	.mode=S_IFCHR | S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH,
	.minor_base=USB_SKEL_MINOR_BASE,
};

static int skel_probe(struct usb_interface *interface, const struct usb_device_id *id)
{
	struct usb_skel *dev = NULL;
	struct usb_host_interface *iface_desc;
	struct usb_endpoint_descriptor *endpoint;
	size_t buffer_size;
	int i;
	int retval=-ENOMEM;
	dev=kmalloc(sizeof(struct usb_skel), GFP_KERNEL);
	if(dev == NULL) 
	{
		err("Out of memory");
		goto error;
	}
	memset(dev, 0x00, sizeof (*dev));
	kref_init(&dev->kref);
	dev->udev = usb_get_dev(interface_to_usbdev(interface));
	dev->interface = interface;
	iface_desc = interface->cur_altsetting;
	for (i=0;i<iface_desc->desc.bNumEndpoints;++i) 
	{
		endpoint=&iface_desc->endpoint[i].desc;
		if (!dev->bulk_in_endpointAddr &&
		    (endpoint->bEndpointAddress & USB_DIR_IN) &&
		    ((endpoint->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)
			== USB_ENDPOINT_XFER_BULK)) 
			{
				buffer_size = endpoint->wMaxPacketSize;
				dev->bulk_in_size = buffer_size;
				dev->bulk_in_endpointAddr = endpoint->bEndpointAddress;
				dev->bulk_in_buffer = kmalloc(buffer_size, GFP_KERNEL);
				if (!dev->bulk_in_buffer) 
				{
					err("Could not allocate bulk_in_buffer");
					goto error;
				}
			}

		if (!dev->bulk_out_endpointAddr &&
		    !(endpoint->bEndpointAddress & USB_DIR_IN) &&
		    ((endpoint->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)
			== USB_ENDPOINT_XFER_BULK)) 
			{
				dev->bulk_out_endpointAddr = endpoint->bEndpointAddress;
			}
	}
	if (!(dev->bulk_in_endpointAddr && dev->bulk_out_endpointAddr)) 
	{
		err("Could not find both bulk-in and bulk-out endpoints");
		goto error;
	}
	usb_set_intfdata(interface, dev);
	retval = usb_register_dev(interface, &skel_class);
	if (retval)
	{
		err("Not able to get a minor for this device.");
		usb_set_intfdata(interface, NULL);
		goto error;
	}
	info("USB Skeleton device now attached to USBSkel-%d", interface->minor);
	return 0;
error:
	if (dev)
		kref_put(&dev->kref, skel_delete);
	return retval;
}
