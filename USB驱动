#include <linux/config.h>
#include <linux/kernel.h>
#include <linux/errno.h>
#include <linux/init.h>
#include <linux/slab.h>
#include <linux/module.h>
#include <linux/kref.h>
#include <linux/smp_lock.h>
#include <linux/usb.h>
#include <asm/uaccess.h>
#define USB_SKEL_VENDOR_ID	0xfff0
#define USB_SKEL_PRODUCT_ID	0xfff0

static struct usb_device_id skel_table [] = 
{
	{USB_DEVICE(USB_SKEL_VENDOR_ID, USB_SKEL_PRODUCT_ID) },{ }					
};
MODULE_DEVICE_TABLE (usb, skel_table);
#define USB_SKEL_MINOR_BASE	192
struct usb_skel 
{
	struct usb_device *	udev;			
	struct usb_interface *	interface;		
	unsigned char *		bulk_in_buffer;		
	size_t			bulk_in_size;	
	__u8			bulk_in_endpointAddr;	
	__u8			bulk_out_endpointAddr;	
	struct kref		kref;
};
#define to_skel_dev(d) container_of(d, struct usb_skel, kref)

static struct usb_driver skel_driver;

static void skel_delete(struct kref *kref)
{	
	struct usb_skel *dev = to_skel_dev(kref);
	usb_put_dev(dev->udev);
	kfree (dev->bulk_in_buffer);
	kfree (dev);
}
